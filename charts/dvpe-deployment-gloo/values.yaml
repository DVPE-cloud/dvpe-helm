# Values for default microservice projects

# -------------------------------#
# secret.yaml value section     #
# -------------------------------#
externalSecrets:
  service:
    # externalSecrets.service.key -- `Key` to AWS Secret Manager object where all sensitive application data should be stored. Each key in the Secret Manager Object should be named like your needed environment variable
    key:
  oauth2:
    # externalSecrets.oauth2.key -- `Key` to AWS Secret Manager object where the client secret for OAuth2 provider should be stored. The key in the Secret Manager Object has to be named as the given `gloo.authConfig.spec.configs.oauth2.clientId`. The value has to be formatted as `clientSecret: <secret>`.
    # **This definition is exclusive to `gloo.authConfig.spec.configs.oauth.clientSecretRef`. If defined, `gloo.authConfig.spec.configs.oauth.clientSecretRef` is ignored.**
    key:

# -------------------------------#
# deployment.yaml value section  #
# -------------------------------#
deployment:
  # deployment.podAnnotations -- Object of additional `podAnnotations`.
  podAnnotations: {}
  spec:
    # deployment.spec.replicas -- The number of service instances to deploy. Will be ignored when autoscaling.enabled is true
    replicas: 1
    # deployment.spec.serviceAccountName -- The ServiceAccount this service will be associated with. If empty, `serviceAccountName` will be `<namespace>-sa`
    serviceAccountName:
    # deployment.spec.imagePullSecrets -- Image Pull Secret to access docker registry.
    imagePullSecrets: docker-reg-secret
    image:
      # deployment.spec.image.repository -- The docker repository to pull the service image from.
      repository:
      # deployment.spec.image.name -- The image name to use.
      name:
      # deployment.spec.image.tag -- The image version to use.
      tag: latest
      # deployment.spec.image.pullPolicy -- The default rule for downloading images.
      pullPolicy: Always
    containers:
      readinessProbe:
        httpGet:
          # deployment.spec.containers.readinessProbe.httpGet.path -- Service's http path on which to execute a readinessProbe
          path: /
          # deployment.spec.containers.readinessProbe.httpGet.port -- Service's http port on which to execute a readinessProbe
          port: 80
          # deployment.spec.containers.readinessProbe.httpGet.scheme -- Http Scheme to use for readinesProbe. Can be either `HTTP` or `HTTPS`.
          scheme: HTTP
        # deployment.spec.containers.readinessProbe.initialDelaySeconds -- Amount of time to wait before performing the first probe.
        initialDelaySeconds: 5
        # deployment.spec.containers.readinessProbe.periodSeconds -- How often to perform the probe (in seconds).
        periodSeconds: 10
        # deployment.spec.containers.readinessProbe.timeoutSeconds -- Number of seconds after which the probe times out.
        timeoutSeconds: 1
        # deployment.spec.containers.readinessProbe.successThreshold -- Threshold to be considered successful after having failed.
        successThreshold: 1
        # deployment.spec.containers.readinessProbe.failureThreshold -- Number of times to retry the probe before giving up.
        failureThreshold: 3
    resources:
      limits:
        # deployment.spec.resources.limits.cpu -- Total amount of CPU time that a container can use every 100 ms. See [Managing Compute Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/) for a detailed description on resource usage.
        cpu: 200m
        # deployment.spec.resources.limits.memory -- The memory limit for a Pod. See [Managing Compute Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/) for a detailed description on resource usage.
        memory: 235M
      requests:
        # deployment.spec.resources.requests.cpu -- Fractional amount of CPU allowed for a Pod. See [Managing Compute Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/) for a detailed description on resource usage.
        cpu: 150m
        # deployment.spec.resources.requests.memory -- Amount of memory reserved for a Pod. See [Managing Compute Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/) for a detailed description on resource usage.
        memory: 200M

# -------------------------------#
# service.yaml value section    #
# -------------------------------#
service:
  spec:
    # service.spec.type -- Specify what kind of service to deploy. See [Kubernetes Service Spec](https://kubernetes.io/docs/concepts/services-networking/service/) for details
    type: ClusterIP
    ports:
      http:
        # service.spec.ports.http.name -- Name of the port within the service. If Istio is enabled, please check [Istio naming conventions](https://istio.io/latest/docs/ops/configuration/traffic-management/protocol-selection/#manual-protocol-selection)
        name: http
        # service.spec.ports.http.protocol -- The protocol the service accepts. Allowed protocols are UDP, TCP, or SCTP.
        protocol: TCP
        # service.spec.ports.http.port -- The http port the service is exposed to in the cluster. If no port is defined, port mapping is disabled.
        port: "8080"
        # service.spec.ports.http.targetPort -- The http port the service listens to and to which requests will be sent. If no `targetPort` is defined, port will be used.
        targetPort: ""
      https:
        # service.spec.ports.https.name -- Name of the port within the service. If Istio is enabled, please check [Istio naming conventions](https://istio.io/latest/docs/ops/configuration/traffic-management/protocol-selection/#manual-protocol-selection)
        name: https
        # service.spec.ports.https.protocol -- The protocol the service accepts. Allowed protocols are UDP, TCP, or SCTP.
        protocol: TCP
        # service.spec.ports.https.port -- The https port the service is exposed to in the cluster. If no port is defined, port mapping is disabled.
        port: ""
        # service.spec.ports.https.targetPort -- The http port the service listens to and to which requests will be sent. If no `targetPort` is defined, port will be used.
        targetPort: ""

# --------------------------------#
# autoscaling.yaml value section #
# --------------------------------#
autoscaling:
  # autoscaling.enabled -- Enables `Horizontal Pod Autoscaler (HPA)` to control the replicas. If it is enabled, the replicas will be removed from the deployment.
  enabled: true
  # autoscaling.maxReplicas -- Defines `maxReplicas` of Pods scaled automatically by Horizontal Pod Autoscaler (HPA).
  maxReplicas: 5
  # autoscaling.minReplicas -- Defines `minReplicas` of Pods scaled automatically by Horizontal Pod Autoscaler (HPA).
  minReplicas: 1
  metrics:
    resource:
      cpu:
        # autoscaling.metrics.resource.cpu.targetAverageUtilization -- Defines cpu utilization threshold in % for the HPA to scale up new pods.
        targetAverageUtilization: 80

# -------------------------------------#
# Extension param value section       #
# -------------------------------------#
additionalparameters:
  # additionalparameters.configMapApplied -- Set to `true` if you want to add a custom `ConfigMap` for your deployment.
  configMapApplied: false
  # additionalparameters.secretsApplied -- Set to `true` if you want to add a custom `Secret` for your deployment.
  secretsApplied: false
  # additionalparameters.yamlConfigFileApplied -- Set to `true` if you want to add a custom yaml configuration for your deployment.
  yamlConfigFileApplied: false

# -------------------------------------#
# Gloo general value section     #
# -------------------------------------#
gloo:
  # gloo.enabled -- When set to true only the application's deployment resources will be installed with this chart. Can be used to explicitly avoid deploying a VirtualService resource.
  enabled: true
  # gloo.namespace -- `Namespace` where all Gloo resources are deployed.
  namespace: gloo-system
  ingress:
    # gloo.ingress.scope -- Signals Gloo which Gateway Proxy to use for deploying a Virtual Service into. Value must be one of `private`, `public` or `cluster-internal`.
    scope:

  # -------------------------------------#
  # Gloo VirtualService value section    #
  # -------------------------------------#
  virtualservice:
    spec:
      sslConfig:
        # gloo.virtualservice.spec.sslConfig.minimumProtocolVersion -- Value of the minimum TLS protocol version. Accepted values are: TLSv1_2, TLSv1_3.
        minimumProtocolVersion: TLSv1_2
        secretRef:
          # gloo.virtualservice.spec.sslConfig.secretRef.name -- Name of the secret containing the certificate information for this deployment.
          name:
          # gloo.virtualservice.spec.sslConfig.secretRef.namespace -- Namespace where the secret is located. If empty, gloo namespace is used.
          namespace:
      virtualHost:
        # gloo.virtualservice.spec.virtualHost.domains -- **String (Deprecated) or List** of `DNS domain names` this service will be published to. *Note:* This domain will also be used for the `callbackUrl`. If multiple domains are given, the first one will be used.
        domains: []
        cors:
          # gloo.virtualservice.spec.virtualHost.cors.allowOrigin -- Specifies the URLs of origins to allow CORS for. Origin URLs have to contain scheme, domain and port (if none-standard port is used).
          allowOrigin: []
          # gloo.virtualservice.spec.virtualHost.cors.allowSubdomain -- Specifies the sub domains of origins to allow CORS for. The sub somain has to be given as URL containing scheme, sub domain and port (if none-standard port is used) - e.g. https://bmwgroup.net:8443.
          allowSubdomain: []
          # gloo.virtualservice.spec.virtualHost.cors.allowCredentials -- Specifies the Access-Control-Allow-Credentials header. Value is `false` by default for security reasons.
          allowCredentials: false
          # gloo.virtualservice.spec.virtualHost.cors.allowMethods -- Specifies the HTTP methods to allow CORS for.
          allowMethods:
            - GET
            - POST
            - PUT
            - DELETE
          # gloo.virtualservice.spec.virtualHost.cors.allowHeaders -- Specifies the content for the `access-control-allow-headers` header. In general this should not be changed.
          allowHeaders:
            - origin
          # gloo.virtualservice.spec.virtualHost.cors.exposeHeaders -- Specifies the content for the `access-control-expose-headers` header. In general this should not be changed.
          exposeHeaders:
            - origin
          # gloo.virtualservice.spec.virtualHost.cors.maxAge -- Specifies the content for the `access-control-max-age` header. In general this should not be changed.
          maxAge: 1d
        # gloo.virtualservice.spec.virtualHost.responseHeadersToAdd -- Map which specifies additional response headers which have to be added to every response of the VirtualHost. In general this map might be extended but the default values should not be removed as they are necessary for security reasons.
        responseHeadersToAdd:
          - name: X-Content-Type-Options
            value: nosniff
          - name: Strict-Transport-Security
            value: max-age=31536000; includeSubDomains
          - name: Content-Security-Policy
            value: frame-ancestors 'self' *.bmwgroup.net *.bmw.com;
        routes:
          # gloo.virtualservice.spec.virtualHost.routes.callbackUrlPath -- Path to `callbackUrl` which needs to be registered at the Identity Provider. Pre-defined route in `VirtualService`.
          callbackUrlPath:
          # gloo.virtualservice.spec.virtualHost.routes.appPath -- Path to `appUrl` where the service can be accessed. Pre-defined route in `VirtualService`.
          appPath: /api
          # gloo.virtualservice.spec.virtualHost.routes.appPathRewrite -- `prefixRewrite` of the appPath. If empty no rewrite is set.
          appPathRewrite:
          # gloo.virtualservice.spec.virtualHost.routes.timeout -- Custom timeout for requests to appPath. For example `60s`.
          appPathTimeout:
          rootPath:
            # gloo.virtualservice.spec.virtualHost.routes.rootPath.upstream -- Name of the `upstream` for the root path. This path will be only created if the appPath is not the rootPath.
            upstream:
          # gloo.virtualservice.spec.virtualHost.routes.additionalRoutes -- List of route configurations for this `VirtualService`. See [gloo VirtualService Specification](https://docs.solo.io/gloo-edge/latest/introduction/architecture/concepts/#virtual-services) for details
          additionalRoutes: []
          swagger:
            # gloo.virtualservice.spec.virtualHost.routes.swagger.enabled -- If set to `true` routing for `...swagger.path` and `...swagger.alternativePath` gets enabled.
            enabled: false
            # gloo.virtualservice.spec.virtualHost.routes.swagger.path -- Path to `swagger-ui.html` page.
            path: /swagger-ui.html
            # gloo.virtualservice.spec.virtualHost.routes.swagger.alternativePath -- Alternative path to Swagger UI, this redirects to `...swagger.path`.
            alternativePath: /docs

  # -------------------------------------#
  # Gloo Auth Config value section       #
  # -------------------------------------#
  authConfig:
    # gloo.authConfig.name -- Prefix of the `Auth Config Plugin`. Final name will be <prefix>-<service-name>
    name: auth-plugin
    # gloo.authConfig.namespace -- Namespace where the `Auth Config Plugin` is located. If empty, release namespace is used.
    namespace:
    spec:
      configs:
        oauth:
          # gloo.authConfig.spec.configs.oauth.enabled -- If `enabled` set to true the oauth plugin from Gloo will be used
          enabled: false
          # gloo.authConfig.spec.configs.oauth.clientId -- Registered `ClientID` at the IDP
          clientId:
          clientSecretRef:
            # gloo.authConfig.spec.configs.oauth.clientSecretRef.name -- Name of the `Secret`. Gloo expects a k8s secret with the key `oauth` and base64 encoded value `clientSecret: secretValue`
            # **This value is ignored if `externalSecrets.oidc.key` is present.**
            name: webeam-oidc
            # gloo.authConfig.spec.configs.oauth.clientSecretRef.namespace -- Namespace were the `Secret` is located. If empty, release namespace is used.
            # **This value is ignored if `externalSecrets.oidc.key` is present.**
            namespace:
          # gloo.authConfig.spec.configs.oauth.issuerUrl -- Issuer URL to the Identity Provider. Gloo adds `.well-known/openid-configuration` to the url automatically
          issuerUrl:
          # gloo.authConfig.spec.configs.oauth.scopes -- List of OIDC scopes. `openid` is set per default by Gloo and must not be added here
          scopes: []
          # gloo.authConfig.spec.configs.oauth.cookieDomain -- The domain to be used for `id_token`, `access_token` or `auth0-session` cookies set after successful authentication. This has to be some kind of wildcard to support cross origin requests. If unset, the cookies get no domain set.
          cookieDomain:
          # gloo.authConfig.spec.configs.oauth.maxAge -- The `maxAge` of the session cookie. Gloo will use the `maxAge` as TTL in Redis as well .If set to `0` the cookie is valid for the existing browser session.
          maxAge: 0
          cache:
            # gloo.authConfig.spec.configs.oauth.cache.enabled -- If `enabled` set to true the Gloo redis cache will be used
            enabled: true
            # gloo.authConfig.spec.configs.oauth.cache.cookieName -- `CookieName` of the session cookie. Need to be `auth0-session` otherwise the TokenValidation plugin will not validate the cookie
            cookieName: auth0-session
            # gloo.authConfig.spec.configs.oauth.cache.host -- Redis `host`.
            host: 'redis.gloo-system.svc.cluster.local:6379'
          # gloo.authConfig.spec.configs.oauth.strongAuthenticationLevel -- The strong authentication level. Possible values are: 4000, 7000. If not set, there is no strong authentication.
          strongAuthenticationLevel:
        tokenValidationPlugin:
          # gloo.authConfig.spec.configs.tokenValidationPlugin.enabled -- If `enabled` set to true the backend plugin will be used
          enabled: false
          # gloo.authConfig.spec.configs.tokenValidationPlugin.name -- `Name` of the auth token validation plugin
          config:
            grpcAddress: 'auth-passthrough-token-validation.gloo-system.svc.cluster.local:9001'
            # gloo.authConfig.spec.configs.tokenValidationPlugin.config.oidcUrl -- `oidcUrl` where the access token can be verified at the IDP
            oidcUrl:
            # gloo.authConfig.spec.configs.tokenValidationPlugin.config.allowedClientIds -- `allowedClientIds` **list (NOT string!)** of ids that are allowed by the plugin. If not given at all, all clients are allowed. If [], then no client is allowed. If [a, b], then a, b are allowed
            allowedClientIds:
            # gloo.authConfig.spec.configs.tokenValidationPlugin.config.strongAuthenticationLevel -- The strong authentication level. Possible values are: 4000, 7000. If not set, there is no strong authentication.
            strongAuthenticationLevel:
        clientCredentialsPlugin:
          # gloo.authConfig.spec.configs.clientCredentialsPlugin.enabled -- If `enabled` set to true the machine to machine plugin will be used
          enabled: false
          # gloo.authConfig.spec.configs.clientCredentialsPlugin.name -- `Name` of the auth client credentials plugin
          name: AuthClientCredentials
          config:
            cache:
              # gloo.authConfig.spec.configs.clientCredentialsPlugin.config.cache.enabled -- if `enabled` is false, no cache is used
              enabled: false
              # gloo.authConfig.spec.configs.clientCredentialsPlugin.config.cache.tableName -- `tableName` of the auth cache
              tableName:
              # gloo.authConfig.spec.configs.clientCredentialsPlugin.config.cache.awsRegion -- `awsRegion` where the cache is located
              awsRegion:
            # gloo.authConfig.spec.configs.clientCredentialsPlugin.config.oidcUrl -- `oidcUrl`  - where the access token can be verified at the IDP
            oidcUrl:
            # gloo.authConfig.spec.configs.clientCredentialsPlugin.config.clientId -- `clientId` of the machine2machine client registered at the IDP
            clientId:
            clientSecretRef:
              # gloo.authConfig.spec.configs.clientCredentialsPlugin.config.clientSecretRef.name -- Name of the `Secret`. Gloo expects a k8s secret with the key `oauth` and base64 encoded value `clientSecret: secretValue`
              # **This value is ignored if `externalSecrets.oidc.key` is present.**
              name: webeam-oidc
              # gloo.authConfig.spec.configs.clientCredentialsPlugin.config.clientSecretRef.namespace -- Namespace were the `Secret` is located. If empty, release namespace is used.
              # **This value is ignored if `externalSecrets.oidc.key` is present.**
              namespace:
            # gloo.authConfig.spec.configs.clientCredentialsPlugin.config.mode -- The AuthClientCredentials plugin can work in two modes: `GatherCredentials` and `VerifyAccessToken`
            mode:
            # gloo.authConfig.spec.configs.clientCredentialsPlugin.config.allowedClientIds -- `allowedClientIds` **list (NOT string!)** of ids that are allowed by the plugin. If not given at all, all clients are allowed. If [], then no client is allowed. If [a, b], then a, b are allowed
            allowedClientIds: []
        authExtensionPlugin:
          # gloo.authConfig.spec.configs.authExtensionPlugin.enabled -- If `enabled` set to true the auth code flow extension plugin will be used
          enabled: false
          # gloo.authConfig.spec.configs.authExtensionPlugin.name -- `Name` of the auth code flow extension plugin
          config:
            # gloo.authConfig.spec.configs.authExtensionPlugin.config.grpcAddress -- `grpcAddress`  - where the access token can be verified at the IDP
            grpcAddress: 'auth-passthrough-extension.gloo-system.svc.cluster.local:9001'
            # gloo.authConfig.spec.configs.authExtensionPlugin.config.oidcUrl -- `oidcUrl`  - where the access token can be verified at the IDP
            oidcUrl:
            # gloo.authConfig.spec.configs.authExtensionPlugin.config.enableAccessTokenForwarding -- `enableAccessTokenForwarding` is a flag which tells whether the access_token should be forwarded or not
            enableAccessTokenForwarding: false
            # gloo.authConfig.spec.configs.authExtensionPlugin.config.enableSubjectForwarding -- `enableSubjectForwarding` is a flag which tells whether the subject (q-number) should be forwarded or not
            enableSubjectForwarding: false
            # gloo.authConfig.spec.configs.authExtensionPlugin.config.enableQAccountMatching -- `enableQAccountMatching` is a flag which forwards the user id (q-number) to the upstream. Only relevant if the user is using a different user id (e.g. c-number) for logging
            enableQAccountMatching: false
        # gloo.authConfig.spec.configs.additionalPlugins -- List of plugins which should be added to the plugin chain. Expected format is a valid yaml with the `pluginAuth`. See [gloo Plugin Auth](https://docs.solo.io/gloo/latest/guides/security/auth/extauth/plugin_auth/#create-an-authconfig-resource) for details
        additionalPlugins:

  # -------------------------------------#
  # Gloo Upstream value section          #
  # -------------------------------------#
  upstream:
    # gloo.upstream.namespace -- `Namespace` where gloo upstream is deployed.
    namespace: gloo-system
    # gloo.upstream.fds -- Whitelist this upstream for `FDS`. [Gloo Function Discovery Mode] (https://docs.solo.io/gloo-edge/latest/installation/advanced_configuration/fds_mode/)
    fds: false

# -------------------------------------#
# DataDog value section                #
# -------------------------------------#
datadog:
  # datadog.enabled -- When set to true Datadog is enabled and all logs, metrics and traces will be sent to Datadog.
  enabled: true
  # datadog.source -- Defines the source which creates log outputs. Source defines the log format and triggers Datadog parser pipelines
  source:
  # datadog.team -- Label in Datadog for the responsible team
  team:
  # datadog.env -- Label in Datadog for the target environment - e.g. test, int, prod or an abbreviated k8s cluster name.
  env: none
  # datadog.version -- Label in Datadog for the service version. If undefined, the value of `deployment.spec.image.tag` is used.
  # This value should not be set by ordinary deployments. It is intended for special cases (e.g. CI triggered deployments).
  version:

# -------------------------------------#
# Istio value section                  #
# -------------------------------------#
istio:
  # istio.enabled -- Enables mtls per workload (pod)
  enabled: true
  peerAuthentication:
    spec:
      mtls:
        # istio.peerAuthentication.spec.mtls.mode -- mTLS mode for istio. [PeerAuthentication-MutualTLS-Mode](https://istio.io/latest/docs/reference/config/security/peer_authentication/#PeerAuthentication-MutualTLS-Mode)
        mode: STRICT
  destinationRule:
    spec:
      trafficPolicy:
        tls:
          # istio.destinationRule.spec.trafficPolicy.tls.mode -- trafficPolicy [ClientTLSSettings-TLSmode](https://istio.io/latest/docs/reference/config/networking/destination-rule/#ClientTLSSettings-TLSmode)
          mode: ISTIO_MUTUAL
# -------------------------------------#
# Certificate value section            #
# -------------------------------------#
certificate:
      # certificate.organizations -- list of organization listed in created certificate details
      organizations: []
      # certificate.countries -- list of countries listed in created certificate details
      countries: []
       # certificate.localities -- list of localities listed in created certificate details
      localities: []
       # certificate.provinces -- list of provinces listed in created certificate details
      provinces: []
       # certificate.organizationalUnits -- list of organizationalUnits listed in created certificate details
      organizationalUnits: []
       # certificate.emailAddresses -- list of emailAddresses listed in created certificate details
      emailAddresses: []
       # certificate.dnsNames -- list of dnsNames listed in created certificate details
      dnsNames: []
