{{- $serviceName := include "service.name" . -}}
{{- $imageUrl := include "image.url" . -}}
{{- $serviceAccountName := include "deployment.spec.serviceAccountName" . -}}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $serviceName }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- if .Values.datadog.enabled }}
    tags.datadoghq.com/env: {{ .Values.datadog.env }}
    tags.datadoghq.com/service: {{ $serviceName }}
    tags.datadoghq.com/version: {{ default .Values.deployment.spec.image.tag .Values.datadog.version }}
    {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.deployment.spec.replicas }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ $serviceName }}
  template:
    metadata:
      labels:
        app: {{ $serviceName }}
        {{- if .Values.datadog.enabled }}
        tags.datadoghq.com/env: {{ .Values.datadog.env }}
        tags.datadoghq.com/service: {{ $serviceName }}
        tags.datadoghq.com/version: {{ default .Values.deployment.spec.image.tag .Values.datadog.version }}
        {{- end }}
      annotations:
        {{- if .Values.datadog.enabled }}
        ad.datadoghq.com/{{ $serviceName }}.check_names: '["{{ $serviceName }}"]'
        ad.datadoghq.com/{{ $serviceName }}.init_configs: '[{}]'
        ad.datadoghq.com/{{ $serviceName }}.logs: '[{"source":"{{ .Values.datadog.source }}", "service":"{{ $serviceName }}" }]'
        ad.datadoghq.com/{{ $serviceName }}.tags: '{"team": "{{ .Values.datadog.team }}"}'
        {{- end}}
        {{- if .Values.deployment.podAnnotations }}
          {{- toYaml .Values.deployment.podAnnotations | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.deployment.spec.imagePullSecrets }}
      serviceAccountName: {{ $serviceAccountName }}
      containers:
        - name: {{ $serviceName }}
          imagePullPolicy: {{ .Values.deployment.spec.image.pullPolicy }}
          image: {{ $imageUrl }}
          envFrom:
            {{- if .Values.externalSecrets.service.key }}
            - secretRef:
                name: {{ $serviceName }}-service-secrets
            {{- end }}
            {{- if .Values.additionalparameters.customConfigMapReference }}
            - configMapRef:
                name: {{ .Values.additionalparameters.customConfigMapReference }}
            {{- end}}
          env:
          {{- if .Values.datadog.enabled }}
          - name: "ENABLE_DATADOG"
            value: {{ quote .Values.datadog.enabled }}
          - name: "DD_AGENT_HOST"
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: DD_ENV
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tags.datadoghq.com/env']
          - name: DD_SERVICE
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tags.datadoghq.com/service']
          - name: DD_VERSION
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tags.datadoghq.com/version']
          {{- end}}
          {{- if .Values.additionalparameters.configMapApplied }}
          {{- range $key, $value := .Values.additionalparameters.config }}
          - name: "{{$key}}"
            valueFrom:
              configMapKeyRef:
                name:  {{ $serviceName }}-additional-parameters
                key: {{$key}}
          {{- end}}
          {{- end}}
          {{- range $key, $value := .Values.additionalparameters.secrets }}
          - name: {{ $key | quote }}
            valueFrom:
              secretKeyRef:
                {{- if $value.secretKeyRef.nameRef }}
                name: {{ $value.secretKeyRef.nameRef }}
                {{- else}}
                name: {{ $.Release.Name }}-{{ $value.secretKeyRef.name }}
                {{- end}}
                key: {{ $value.secretKeyRef.key }}
          {{- end}}
          readinessProbe:
            httpGet:
              path: {{ .Values.deployment.spec.containers.readinessProbe.httpGet.path }}
              port: {{ .Values.deployment.spec.containers.readinessProbe.httpGet.port }}
              scheme: {{ .Values.deployment.spec.containers.readinessProbe.httpGet.scheme }}
            initialDelaySeconds: {{ .Values.deployment.spec.containers.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.spec.containers.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.deployment.spec.containers.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.deployment.spec.containers.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.deployment.spec.containers.readinessProbe.failureThreshold }}
          {{- if .Values.deployment.spec.containers.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.deployment.spec.containers.livenessProbe.httpGet.path }}
              port: {{ .Values.deployment.spec.containers.livenessProbe.httpGet.port }}
              scheme: {{ .Values.deployment.spec.containers.livenessProbe.httpGet.scheme }}
            initialDelaySeconds: {{ .Values.deployment.spec.containers.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.spec.containers.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.deployment.spec.containers.livenessProbe.timeoutSeconds }}
            successThreshold: 1
            failureThreshold: {{ .Values.deployment.spec.containers.livenessProbe.failureThreshold }}
          {{- end }}
          resources:
            limits:
              {{- if .Values.deployment.spec.resources.limits.cpu }}
              cpu: {{ .Values.deployment.spec.resources.limits.cpu }}
              {{- end }}
              {{- if .Values.deployment.spec.resources.limits.memory }}
              memory: {{ .Values.deployment.spec.resources.limits.memory }}
              {{- end }}
            requests:
              cpu: {{ .Values.deployment.spec.resources.requests.cpu }}
              memory: {{ .Values.deployment.spec.resources.requests.memory }}
      {{- if .Values.additionalparameters.yamlConfigFileApplied }}
          volumeMounts:
            - name: yaml-config-volume
              mountPath: /etc/config
      volumes:
        - name: yaml-config-volume
          configMap:
            name: {{ $serviceName }}-additional-config-yaml
      {{ end }}
